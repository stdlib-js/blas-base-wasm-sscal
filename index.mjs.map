{"version":3,"file":"index.mjs","sources":["../lib/binary.browser.js","../lib/module.js","../lib/routine.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base64ToUint8Array from '@stdlib/string-base-base64-to-uint8array';\n\n\n// MAIN //\n\nvar wasm = base64ToUint8Array( 'AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAETA2AAAGAEf31/fwBgBX99f39/AAIPAQNlbnYGbWVtb3J5AgAAAwQDAAECB0wEEV9fd2FzbV9jYWxsX2N0b3JzAAAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAAHY19zc2NhbAABD2Nfc3NjYWxfbmRhcnJheQACCpsCAwMAAQscACAAIAEgAiADQQEgAGsgA2xBACADQQBMGxACC/cBAQJ/AkAgAEEATCABQwAAgD9bcg0AIANBAUcEQANAIAAgBUYNAiACIARBAnRqIgYgASAGKgIAlDgCACAFQQFqIQUgAyAEaiEEDAALAAsCQCAAQQVwIgZFDQADQCAFIAZGDQEgAiAEQQJ0aiIDIAEgAyoCAJQ4AgAgBUEBaiEFIARBAWohBAwACwALIABBBUgNAANAIAAgBkwNASACIARBAnRqIgMgASADKgIAlDgCACADIAEgAyoCBJQ4AgQgAyABIAMqAgiUOAIIIAMgASADKgIMlDgCDCADIAEgAyoCEJQ4AhAgBkEFaiEGIARBBWohBAwACwALCw==' );\n\n\n// EXPORTS //\n\nexport default wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isWebAssemblyMemory from '@stdlib/assert-is-wasm-memory';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport WasmModule from '@stdlib/wasm-module-wrapper';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport wasmBinary from './binary.js';\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var sscal = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* sscal.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing an input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* sscal.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = sscal.main( N, 5.0, xptr, 1 );\n* // returns <number>\n*\n* var bool = ( ptr === xptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* sscal.read( xptr, view );\n* // view => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Multiplies a vector `x` by a constant `alpha`.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @returns {NonNegativeInteger} input array pointer (i.e., byte offset)\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var sscal = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* sscal.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing an input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* sscal.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = sscal.main( N, 5.0, xptr, 1 );\n* // returns <number>\n*\n* var bool = ( ptr === xptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* sscal.read( xptr, view );\n* // view => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nsetReadOnly( Module.prototype, 'main', function sscal( N, alpha, xptr, strideX ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_sscal( N, alpha, xptr, strideX );\n\treturn xptr;\n});\n\n/**\n* Multiplies a vector `x` by a constant `alpha` using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {NonNegativeInteger} input array pointer (i.e., byte offset)\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var sscal = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* sscal.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing an input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* sscal.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = sscal.ndarray( N, 5.0, xptr, 1, 0 );\n* // returns <number>\n*\n* var bool = ( ptr === xptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* sscal.read( xptr, view );\n* // view => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nsetReadOnly( Module.prototype, 'ndarray', function sscal( N, alpha, xptr, strideX, offsetX ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_sscal_ndarray( N, alpha, xptr, strideX, offsetX );\n\treturn xptr;\n});\n\n\n// EXPORTS //\n\nexport default Module;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport { ndarray as readDataView } from '@stdlib/strided-base-read-dataview';\nimport Memory from '@stdlib/wasm-memory';\nimport arrays2ptrs from '@stdlib/wasm-base-arrays2ptrs';\nimport strided2object from '@stdlib/wasm-base-strided2object';\nimport Module from './module.js';\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var sscal = new Routine();\n*\n* // Initialize the module:\n* sscal.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.main( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var sscal = new Routine();\n*\n* // Initialize the module:\n* sscal.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Multiplies a vector `x` by a constant `alpha`.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var sscal = new Routine();\n*\n* // Initialize the module:\n* sscal.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.main( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nsetReadOnly( Routine.prototype, 'main', function sscal( N, alpha, x, strideX ) {\n\treturn this.ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n});\n\n/**\n* Multiplies a vector `x` by a constant `alpha` using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float32Array} input array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var sscal = new Routine();\n*\n* // Initialize the module:\n* sscal.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function sscal( N, alpha, x, strideX, offsetX ) {\n\tvar ptrs;\n\tvar p0;\n\n\t// Convert the input array to a \"pointer\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX )\n\t]);\n\tp0 = ptrs[0];\n\n\t// Perform computation by calling the corresponding parent method:\n\tModule.prototype.ndarray.call( this, N, alpha, p0.ptr, p0.stride, p0.offset ); // eslint-disable-line max-len\n\n\t// If the input array data had to be copied to module memory, copy the results to the provided input array...\n\tif ( p0.copy ) {\n\t\treadDataView( N, this.view, p0.stride*p0.BYTES_PER_ELEMENT, p0.ptr, x, strideX, offsetX, true ); // eslint-disable-line max-len\n\t}\n\treturn x;\n});\n\n\n// EXPORTS //\n\nexport default Routine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Routine from './routine.js';\n\n\n// MAIN //\n\n/**\n* WebAssembly module to multiply a vector `x` by a constant `alpha`.\n*\n* @name sscal\n* @type {Routine}\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.main( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\nvar sscal = new Routine();\nsscal.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nexport default sscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to multiply a vector `x` by a constant `alpha`.\n*\n* @module @stdlib/blas-base-wasm-sscal\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import sscal from '@stdlib/blas-base-wasm-sscal';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.main( x.length, 5.0, x, 1 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import sscal from '@stdlib/blas-base-wasm-sscal';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* sscal.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import sscal from '@stdlib/blas-base-wasm-sscal';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new sscal.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing an input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* mod.main( N, 5.0, xptr, 1 );\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* mod.read( xptr, view );\n*\n* console.log( view );\n* // => <Float32Array>[ 5.0, 10.0, 15.0, 20.0, 25.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport Module from './module.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],"names":["wasm","base64ToUint8Array","Module","memory","this","isWebAssemblyMemory","TypeError","format","WasmModule","call","wasmBinary","env","Routine","Memory","initial","inherits","setReadOnly","prototype","N","alpha","xptr","strideX","_instance","exports","c_sscal","offsetX","c_sscal_ndarray","x","ndarray","stride2offset","p0","arrays2ptrs","strided2object","ptr","stride","offset","copy","readDataView","view","BYTES_PER_ELEMENT","sscal","initializeSync","main"],"mappings":";;8hCA2BA,IAAIA,EAAOC,EAAoB,wkBC2D/B,SAASC,EAAQC,GAChB,KAAQC,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,GAEpB,IAAME,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,6EAA8EJ,IAS5G,OANAK,EAAWC,KAAML,KAAMM,EAAYP,EAAQ,CAC1CQ,IAAO,CACNR,OAAUA,KAILC,IACR,CC1BA,SAASQ,IACR,OAAQR,gBAAgBQ,GAGxBV,EAAOO,KAAML,KAAM,IAAIS,EAAO,CAC7BC,QAAW,KAELV,MALC,IAAIQ,CAMb,CDqBAG,EAAUb,EAAQM,GA2DlBQ,EAAad,EAAOe,UAAW,QAAQ,SAAgBC,EAAGC,EAAOC,EAAMC,GAEtE,OADAjB,KAAKkB,UAAUC,QAAQC,QAASN,EAAGC,EAAOC,EAAMC,GACzCD,CACR,IA4DAJ,EAAad,EAAOe,UAAW,WAAW,SAAgBC,EAAGC,EAAOC,EAAMC,EAASI,GAElF,OADArB,KAAKkB,UAAUC,QAAQG,gBAAiBR,EAAGC,EAAOC,EAAMC,EAASI,GAC1DL,CACR,IC/IAL,EAAUH,EAASV,GA+BnBc,EAAaJ,EAAQK,UAAW,QAAQ,SAAgBC,EAAGC,EAAOQ,EAAGN,GACpE,OAAOjB,KAAKwB,QAASV,EAAGC,EAAOQ,EAAGN,EAASQ,EAAeX,EAAGG,GAC9D,IAgCAL,EAAaJ,EAAQK,UAAW,WAAW,SAAgBC,EAAGC,EAAOQ,EAAGN,EAASI,GAChF,IACIK,EAeJ,OATAA,EAHOC,EAAa3B,KAAM,CACzB4B,EAAgBd,EAAGS,EAAGN,EAASI,KAEtB,GAGVvB,EAAOe,UAAUW,QAAQnB,KAAML,KAAMc,EAAGC,EAAOW,EAAGG,IAAKH,EAAGI,OAAQJ,EAAGK,QAGhEL,EAAGM,MACPC,EAAcnB,EAAGd,KAAKkC,KAAMR,EAAGI,OAAOJ,EAAGS,kBAAmBT,EAAGG,IAAKN,EAAGN,EAASI,GAAS,GAEnFE,CACR,ICpHG,IAACa,EAAQ,IAAI5B,EAChB4B,EAAMC,iBC8CNzB,EAAA0B,EAAA,SAAAxC"}